#ifndef _TESSERACT_KEYCHAIN_
#define _TESSERACT_KEYCHAIN_

/* Generated with cbindgen:0.8.3 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include "keychain_build_config.h"

typedef enum {
  English = 0,
  French = 1,
  Japanese = 2,
  Korean = 3,
  ChineseSimplified = 4,
  ChineseTraditional = 5,
  Italian = 6,
  Spanish = 7,
} Language;

typedef struct {
  uint32_t _0;
} Network;

typedef struct {
  const uint8_t *ptr;
  uintptr_t len;
} Data;

typedef const unsigned char *PChar;

typedef struct {
  PChar id;
  PChar message;
} Error;

#if defined(WITH_FEATURE_BACKUP)
typedef struct {
  Network network;
  Data data;
} KeyBackupElem;
#endif

#if defined(WITH_FEATURE_BACKUP)
typedef struct {
  const KeyBackupElem *ptr;
  uintptr_t count;
} KeyBackup;
#endif

typedef struct {
  void *_0;
} Keychain;

typedef struct {
  void *_0;
} KeychainManager;

typedef struct {
  Data data;
  Keychain keychain;
} KeychainData;

typedef struct {
  const Network *ptr;
  uintptr_t count;
} Networks;

typedef struct {
  uint32_t purpose;
  uint32_t coin;
  uint32_t account;
  uint32_t change;
  uint32_t address;
} KeyPath;

#if defined(WITH_FEATURE_BITCOIN)
Network NETWORK_BITCOIN(void);
#endif

#if defined(WITH_FEATURE_CARDANO)
Network NETWORK_CARDANO(void);
#endif

#if defined(WITH_FEATURE_ETHEREUM)
Network NETWORK_ETHEREUM(void);
#endif

void delete_data(Data *data);

void delete_error(Error *error);

#if defined(WITH_FEATURE_BACKUP)
void delete_key_backup(KeyBackup *backup);
#endif

void delete_keychain(Keychain *keychain);

void delete_keychain_manager(KeychainManager *manager);

bool keychain_manager_change_password(const KeychainManager *manager,
                                      const uint8_t *data,
                                      uintptr_t data_len,
                                      PChar old_password,
                                      PChar new_password,
                                      Data *response,
                                      Error *error);

bool keychain_manager_generate_mnemonic(const KeychainManager *manager,
                                        Language lang,
                                        PChar *mnemonic,
                                        Error *error);

#if defined(WITH_FEATURE_BACKUP)
bool keychain_manager_get_keys_data(const KeychainManager *manager,
                                    const uint8_t *encrypted,
                                    uintptr_t encrypted_len,
                                    PChar password,
                                    KeyBackup *data,
                                    Error *error);
#endif

bool keychain_manager_has_network(const KeychainManager *manager, Network network);

bool keychain_manager_keychain_from_data(const KeychainManager *manager,
                                         const uint8_t *data,
                                         uintptr_t data_len,
                                         PChar password,
                                         Keychain *keychain,
                                         Error *error);

bool keychain_manager_keychain_from_mnemonic(const KeychainManager *manager,
                                             PChar mnemonic,
                                             PChar password,
                                             Language lang,
                                             KeychainData *data,
                                             Error *error);

bool keychain_manager_keychain_from_seed(const KeychainManager *manager,
                                         const uint8_t *seed,
                                         uintptr_t seed_len,
                                         PChar password,
                                         KeychainData *data,
                                         Error *error);

bool keychain_manager_new(KeychainManager *manager, Error *error);

Networks keychain_networks(const Keychain *keychain);

bool keychain_pub_key(const Keychain *keychain,
                      Network network,
                      KeyPath path,
                      Data *key,
                      Error *error);

bool keychain_sign(const Keychain *keychain,
                   Network network,
                   const uint8_t *data,
                   uintptr_t data_len,
                   KeyPath path,
                   Data *signature,
                   Error *error);

bool keychain_verify(const Keychain *keychain,
                     Network network,
                     const uint8_t *data,
                     uintptr_t data_len,
                     const uint8_t *signature,
                     uintptr_t signature_len,
                     KeyPath path,
                     bool *result,
                     Error *error);

#if defined(WITH_FEATURE_BITCOIN)
bool keypath_bitcoin_new_bip44(bool testnet,
                               uint32_t account,
                               uint32_t change,
                               uint32_t address,
                               KeyPath *path,
                               Error *error);
#endif

#if defined(WITH_FEATURE_BITCOIN)
bool keypath_bitcoin_new_bip49(bool testnet,
                               uint32_t account,
                               uint32_t change,
                               uint32_t address,
                               KeyPath *path,
                               Error *error);
#endif

#if defined(WITH_FEATURE_BITCOIN)
bool keypath_bitcoin_new_bip84(bool testnet,
                               uint32_t account,
                               uint32_t change,
                               uint32_t address,
                               KeyPath *path,
                               Error *error);
#endif

#if defined(WITH_FEATURE_CARDANO)
bool keypath_cardano_new(uint32_t account,
                         uint32_t change,
                         uint32_t address,
                         KeyPath *path,
                         Error *error);
#endif

#if defined(WITH_FEATURE_ETHEREUM)
bool keypath_ethereum_new(uint32_t account, KeyPath *path, Error *error);
#endif

#if defined(WITH_FEATURE_ETHEREUM)
bool keypath_ethereum_new_metamask(uint32_t account, KeyPath *path, Error *error);
#endif

bool keypath_from_string(PChar string, KeyPath *key_path, Error *error);

#endif /* _TESSERACT_KEYCHAIN_ */
